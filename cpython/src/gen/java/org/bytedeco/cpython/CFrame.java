// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.cpython;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;

import static com.oracle.svm.shadowed.org.bytedeco.cpython.global.python.*;



@Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.cpython.presets.python.class)
public class CFrame extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CFrame() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CFrame(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CFrame(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CFrame position(long position) {
        return (CFrame)super.position(position);
    }
    @Override public CFrame getPointer(long i) {
        return new CFrame((Pointer)this).offsetAddress(i);
    }

    /* This struct will be threaded through the C stack
     * allowing fast access to per-thread state that needs
     * to be accessed quickly by the interpreter, but can
     * be modified outside of the interpreter.
     *
     * WARNING: This makes data on the C stack accessible from
     * heap objects. Care must be taken to maintain stack
     * discipline and make sure that instances of this struct cannot
     * accessed outside of their lifetime.
     */
    public native int use_tracing(); public native CFrame use_tracing(int setter);
    public native @Cast("_cframe*") CFrame previous(); public native CFrame previous(CFrame setter);
}

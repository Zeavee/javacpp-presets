// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.tensorrt.nvinfer_plugin;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.cuda.cudart.*;
import static com.oracle.svm.shadowed.org.bytedeco.cuda.global.cudart.*;
import com.oracle.svm.shadowed.org.bytedeco.cuda.cublas.*;
import static com.oracle.svm.shadowed.org.bytedeco.cuda.global.cublas.*;
import com.oracle.svm.shadowed.org.bytedeco.cuda.cudnn.*;
import static com.oracle.svm.shadowed.org.bytedeco.cuda.global.cudnn.*;
import com.oracle.svm.shadowed.org.bytedeco.cuda.nvrtc.*;
import static com.oracle.svm.shadowed.org.bytedeco.cuda.global.nvrtc.*;
import com.oracle.svm.shadowed.org.bytedeco.tensorrt.nvinfer.*;
import static com.oracle.svm.shadowed.org.bytedeco.tensorrt.global.nvinfer.*;

import static com.oracle.svm.shadowed.org.bytedeco.tensorrt.global.nvinfer_plugin.*;


/**
 *  \brief When performing yolo9000, softmaxTree is helping to do softmax on confidence scores, for element to get the precise classification through word-tree structured classification definition.
 *  */
@Namespace("nvinfer1::plugin") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.tensorrt.presets.nvinfer_plugin.class)
public class softmaxTree extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public softmaxTree() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public softmaxTree(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public softmaxTree(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public softmaxTree position(long position) {
        return (softmaxTree)super.position(position);
    }
    @Override public softmaxTree getPointer(long i) {
        return new softmaxTree((Pointer)this).offsetAddress(i);
    }

    public native IntPointer leaf(); public native softmaxTree leaf(IntPointer setter);
    public native int n(); public native softmaxTree n(int setter);
    public native IntPointer parent(); public native softmaxTree parent(IntPointer setter);
    public native IntPointer child(); public native softmaxTree child(IntPointer setter);
    public native IntPointer group(); public native softmaxTree group(IntPointer setter);
    public native @Cast("char*") BytePointer name(int i); public native softmaxTree name(int i, BytePointer setter);
    public native @Cast("char**") PointerPointer name(); public native softmaxTree name(PointerPointer setter);

    public native int groups(); public native softmaxTree groups(int setter);
    public native IntPointer groupSize(); public native softmaxTree groupSize(IntPointer setter);
    public native IntPointer groupOffset(); public native softmaxTree groupOffset(IntPointer setter);
}

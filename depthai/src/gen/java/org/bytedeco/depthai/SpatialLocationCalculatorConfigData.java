// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.depthai;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_core.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_core.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_imgproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_imgproc.*;

import static com.oracle.svm.shadowed.org.bytedeco.depthai.global.depthai.*;


/** SpatialLocation configuration data structure */
@Namespace("dai") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.depthai.presets.depthai.class)
public class SpatialLocationCalculatorConfigData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SpatialLocationCalculatorConfigData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SpatialLocationCalculatorConfigData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SpatialLocationCalculatorConfigData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SpatialLocationCalculatorConfigData position(long position) {
        return (SpatialLocationCalculatorConfigData)super.position(position);
    }
    @Override public SpatialLocationCalculatorConfigData getPointer(long i) {
        return new SpatialLocationCalculatorConfigData((Pointer)this).offsetAddress(i);
    }

    /**
     * Region of interest for spatial location calculation.
     */
    public native @ByRef Rect roi(); public native SpatialLocationCalculatorConfigData roi(Rect setter);
    /**
     * Upper and lower thresholds for depth values to take into consideration.
     */
    public native @ByRef SpatialLocationCalculatorConfigThresholds depthThresholds(); public native SpatialLocationCalculatorConfigData depthThresholds(SpatialLocationCalculatorConfigThresholds setter);
    /**
     * Calculation method used to obtain spatial locations
     * Average - the average of ROI is used for calculation.
     * Min: the minimum value inside ROI is used for calculation.
     * Max: the maximum value inside ROI is used for calculation.
     * Default: average.
     */
    public native SpatialLocationCalculatorAlgorithm calculationAlgorithm(); public native SpatialLocationCalculatorConfigData calculationAlgorithm(SpatialLocationCalculatorAlgorithm setter);
}

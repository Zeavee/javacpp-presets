// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.depthai;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_core.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_core.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_imgproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_imgproc.*;

import static com.oracle.svm.shadowed.org.bytedeco.depthai.global.depthai.*;


/**
 * SpatialLocationCalculatorData message. Carries spatial information (X,Y,Z) and their configuration parameters
 */
@Namespace("dai") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.depthai.presets.depthai.class)
public class SpatialLocationCalculatorData extends Buffer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SpatialLocationCalculatorData(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SpatialLocationCalculatorData(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SpatialLocationCalculatorData position(long position) {
        return (SpatialLocationCalculatorData)super.position(position);
    }
    @Override public SpatialLocationCalculatorData getPointer(long i) {
        return new SpatialLocationCalculatorData((Pointer)this).offsetAddress(i);
    }

    /**
     * Construct SpatialLocationCalculatorData message.
     */
    public SpatialLocationCalculatorData() { super((Pointer)null); allocate(); }
    private native void allocate();
    public SpatialLocationCalculatorData(@SharedPtr RawSpatialLocations ptr) { super((Pointer)null); allocate(ptr); }
    private native void allocate(@SharedPtr RawSpatialLocations ptr);

    /**
     * Retrieve configuration data for SpatialLocationCalculatorData.
     * @return Vector of spatial location data, carrying spatial information (X,Y,Z)
     */
    public native @StdVector SpatialLocations getSpatialLocations();

    public native @StdVector SpatialLocations spatialLocations(); public native SpatialLocationCalculatorData spatialLocations(SpatialLocations setter);
}

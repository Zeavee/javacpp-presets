// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.tensorflow;

import com.oracle.svm.shadowed.org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;

import static com.oracle.svm.shadowed.org.bytedeco.tensorflow.global.tensorflow.*;


/** Computes sine of x element-wise.
 * 
 *    Given an input tensor, this function computes sine of every
 *    element in the tensor. Input range is {@code (-inf, inf)} and
 *    output range is {@code [-1,1]}.
 * 
 *    <pre>{@code python
 *    x = tf.constant([-float("inf"), -9, -0.5, 1, 1.2, 200, 10, float("inf")])
 *    tf.math.sin(x) ==> [nan -0.4121185 -0.47942555 0.84147096 0.9320391 -0.87329733 -0.54402107 nan]
 *    }</pre>
 * 
 *  Arguments:
 *  * scope: A Scope object
 * 
 *  Returns:
 *  * {@code Output}: The y tensor. */
@Namespace("tensorflow::ops") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.tensorflow.presets.tensorflow.class)
public class Sin extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Sin(Pointer p) { super(p); }

  public Sin(@Const @ByRef Scope scope, @ByVal Input x) { super((Pointer)null); allocate(scope, x); }
  private native void allocate(@Const @ByRef Scope scope, @ByVal Input x);
  public native @ByVal @Name("operator tensorflow::Output") Output asOutput();
  public native @ByVal @Name("operator tensorflow::Input") Input asInput();
  public native Node node();

  public native @ByRef Operation operation(); public native Sin operation(Operation setter);
  public native @ByRef Output y(); public native Sin y(Output setter);
}

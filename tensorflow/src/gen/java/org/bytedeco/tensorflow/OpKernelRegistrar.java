// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.tensorflow;

import com.oracle.svm.shadowed.org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;

import static com.oracle.svm.shadowed.org.bytedeco.tensorflow.global.tensorflow.*;


@Namespace("tensorflow::kernel_factory") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.tensorflow.presets.tensorflow.class)
public class OpKernelRegistrar extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OpKernelRegistrar(Pointer p) { super(p); }

  // Registers the given kernel factory with TensorFlow. TF will call the
  // factory Create() method when it determines that a kernel matching the given
  // KernelDef is required.
  public OpKernelRegistrar(@Const KernelDef kernel_def, @StringPiece BytePointer kernel_class_name,
                      @MoveUniquePtr OpKernelFactory factory) { super((Pointer)null); allocate(kernel_def, kernel_class_name, factory); }
  private native void allocate(@Const KernelDef kernel_def, @StringPiece BytePointer kernel_class_name,
                      @MoveUniquePtr OpKernelFactory factory);
  public OpKernelRegistrar(@Const KernelDef kernel_def, @StringPiece String kernel_class_name,
                      @MoveUniquePtr OpKernelFactory factory) { super((Pointer)null); allocate(kernel_def, kernel_class_name, factory); }
  private native void allocate(@Const KernelDef kernel_def, @StringPiece String kernel_class_name,
                      @MoveUniquePtr OpKernelFactory factory);

  // Registers the given factory function with TensorFlow. This is equivalent
  // to registering a factory whose Create function invokes `create_fn`.
  public static class Create_fn_OpKernelConstruction extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Create_fn_OpKernelConstruction(Pointer p) { super(p); }
      protected Create_fn_OpKernelConstruction() { allocate(); }
      private native void allocate();
      public native OpKernel call(OpKernelConstruction arg0);
  }
  public OpKernelRegistrar(@Const KernelDef kernel_def, @StringPiece BytePointer kernel_class_name,
                      Create_fn_OpKernelConstruction create_fn) { super((Pointer)null); allocate(kernel_def, kernel_class_name, create_fn); }
  private native void allocate(@Const KernelDef kernel_def, @StringPiece BytePointer kernel_class_name,
                      Create_fn_OpKernelConstruction create_fn);
  public OpKernelRegistrar(@Const KernelDef kernel_def, @StringPiece String kernel_class_name,
                      Create_fn_OpKernelConstruction create_fn) { super((Pointer)null); allocate(kernel_def, kernel_class_name, create_fn); }
  private native void allocate(@Const KernelDef kernel_def, @StringPiece String kernel_class_name,
                      Create_fn_OpKernelConstruction create_fn);
}

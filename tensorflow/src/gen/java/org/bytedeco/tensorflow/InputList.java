// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.tensorflow;

import com.oracle.svm.shadowed.org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;

import static com.oracle.svm.shadowed.org.bytedeco.tensorflow.global.tensorflow.*;


/** A type for representing the input to ops that require a list of tensors. */
@Namespace("tensorflow") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.tensorflow.presets.tensorflow.class)
public class InputList extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InputList(Pointer p) { super(p); }

  /** Implicitly convert a list of outputs to a list of inputs. This is useful
   *  to write code such as ops::Concat(ops::Split(x, 4)). */
  public InputList(@Cast("const tensorflow::OutputList*") @ByRef OutputVector out) { super((Pointer)null); allocate(out); }
  private native void allocate(@Cast("const tensorflow::OutputList*") @ByRef OutputVector out);

  public InputList(@ArraySlice Input inputs) { super((Pointer)null); allocate(inputs); }
  private native void allocate(@ArraySlice Input inputs);
}

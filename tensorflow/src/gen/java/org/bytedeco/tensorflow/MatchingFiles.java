// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.tensorflow;

import com.oracle.svm.shadowed.org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;

import static com.oracle.svm.shadowed.org.bytedeco.tensorflow.global.tensorflow.*;


/** Returns the set of files matching one or more glob patterns.
 * 
 *  Note that this routine only supports wildcard characters in the
 *  basename portion of the pattern, not in the directory portion.
 *  Note also that the order of filenames returned is deterministic.
 * 
 *  Arguments:
 *  * scope: A Scope object
 *  * pattern: Shell wildcard pattern(s). Scalar or vector of type string.
 * 
 *  Returns:
 *  * {@code Output}: A vector of matching filenames. */
@Namespace("tensorflow::ops") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.tensorflow.presets.tensorflow.class)
public class MatchingFiles extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MatchingFiles(Pointer p) { super(p); }

  public MatchingFiles(@Const @ByRef Scope scope, @ByVal Input pattern) { super((Pointer)null); allocate(scope, pattern); }
  private native void allocate(@Const @ByRef Scope scope, @ByVal Input pattern);
  public native @ByVal @Name("operator tensorflow::Output") Output asOutput();
  public native @ByVal @Name("operator tensorflow::Input") Input asInput();
  public native Node node();

  public native @ByRef Operation operation(); public native MatchingFiles operation(Operation setter);
  public native @ByRef Output filenames(); public native MatchingFiles filenames(Output setter);
}

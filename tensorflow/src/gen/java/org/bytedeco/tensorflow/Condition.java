// Targeted by JavaCPP version 1.5.2: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.tensorflow;

import com.oracle.svm.shadowed.org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.tensorflow.global.tensorflow.*;


// A Condition represents a predicate on state protected by a mutex.  The
// function must have no side-effects on that state.  When passed to
// mutex::Await(), the function will be called with the mutex held.  It may be
// called:
// - any number of times;
// - by any thread using the mutex; and/or
// - with the mutex held in any mode (read or write).
// If you must use a lambda, prefix the lambda with +, and capture no variables.
// For example:  Condition(+[](int *pi)->bool { return *pi == 0; }, &i)
@Namespace("tensorflow") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.tensorflow.presets.tensorflow.class)
public class Condition extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Condition(Pointer p) { super(p); }
  // Value is (*func)(arg)  // Value is obj->*method()  // Value is obj->*method()
  public Condition(@Cast("const bool*") BoolPointer flag) { super((Pointer)null); allocate(flag); }
  private native void allocate(@Cast("const bool*") BoolPointer flag);
  public Condition(@Cast("const bool*") boolean... flag) { super((Pointer)null); allocate(flag); }
  private native void allocate(@Cast("const bool*") boolean... flag);          // Value is *flag

  // Return the value of the predicate represented by this Condition.
  public native @Cast("bool") boolean Eval();
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.arrow_flight;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.arrow.*;
import static com.oracle.svm.shadowed.org.bytedeco.arrow.global.arrow.*;

import static com.oracle.svm.shadowed.org.bytedeco.arrow.global.arrow_flight.*;


/** \brief Indicate that the client attempted to write a message
 *      larger than the soft limit set via write_size_limit_bytes. */
@Namespace("arrow::flight") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.arrow.presets.arrow_flight.class)
public class FlightWriteSizeStatusDetail extends StatusDetail {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FlightWriteSizeStatusDetail(Pointer p) { super(p); }

  public FlightWriteSizeStatusDetail(@Cast("int64_t") long _limit, @Cast("int64_t") long actual) { super((Pointer)null); allocate(_limit, actual); }
  private native void allocate(@Cast("int64_t") long _limit, @Cast("int64_t") long actual);
  public native String type_id();
  public native @StdString String ToString();
  public native @Cast("int64_t") @Name("limit") long _limit();
  public native @Cast("int64_t") long actual();

  /** \brief Extract this status detail from a status, or return
   *      nullptr if the status doesn't contain this status detail. */
  public static native @SharedPtr FlightWriteSizeStatusDetail UnwrapStatus(
        @Const @ByRef Status status);
}

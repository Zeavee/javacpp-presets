// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.arrow_flight;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.arrow.*;
import static com.oracle.svm.shadowed.org.bytedeco.arrow.global.arrow.*;

import static com.oracle.svm.shadowed.org.bytedeco.arrow.global.arrow_flight.*;


/** \brief An authentication implementation for a Flight service.
 *  Authentication includes both an initial negotiation and a per-call
 *  token validation. Implementations may choose to use either or both
 *  mechanisms. */
@Namespace("arrow::flight") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.arrow.presets.arrow_flight.class)
public class ClientAuthHandler extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ClientAuthHandler(Pointer p) { super(p); }

  /** \brief Authenticate the client on initial connection. The client
   *  can send messages to/read responses from the server at any time.
   *  @return Status OK if authenticated successfully */
  public native @ByVal Status Authenticate(ClientAuthSender outgoing, ClientAuthReader incoming);
  /** \brief Get a per-call token.
   *  @param token [out] The token to send to the server. */
  public native @ByVal Status GetToken(@StdString @Cast({"char*", "std::string*"}) BytePointer token);
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.arrow_dataset;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.arrow.*;
import static com.oracle.svm.shadowed.org.bytedeco.arrow.global.arrow.*;
import com.oracle.svm.shadowed.org.bytedeco.parquet.*;
import static com.oracle.svm.shadowed.org.bytedeco.arrow.global.parquet.*;

import static com.oracle.svm.shadowed.org.bytedeco.arrow.global.arrow_dataset.*;


/** \defgroup dataset-implementations Concrete implementations
 * 
 *  \{
 <p>
 *  \brief A trivial Fragment that yields ScanTask out of a fixed set of
 *  RecordBatch. */
@Namespace("arrow::dataset") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.arrow.presets.arrow_dataset.class)
public class InMemoryFragment extends Fragment {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InMemoryFragment(Pointer p) { super(p); }

  public InMemoryFragment(@SharedPtr @ByVal Schema schema, @ByVal RecordBatchVector record_batches,
                     @ByVal(nullValue = "arrow::compute::Expression(compute::literal(true))") Expression arg2) { super((Pointer)null); allocate(schema, record_batches, arg2); }
  private native void allocate(@SharedPtr @ByVal Schema schema, @ByVal RecordBatchVector record_batches,
                     @ByVal(nullValue = "arrow::compute::Expression(compute::literal(true))") Expression arg2);
  public InMemoryFragment(@SharedPtr @ByVal Schema schema, @ByVal RecordBatchVector record_batches) { super((Pointer)null); allocate(schema, record_batches); }
  private native void allocate(@SharedPtr @ByVal Schema schema, @ByVal RecordBatchVector record_batches);
  public InMemoryFragment(@ByVal RecordBatchVector record_batches,
                              @ByVal(nullValue = "arrow::compute::Expression(compute::literal(true))") Expression arg1) { super((Pointer)null); allocate(record_batches, arg1); }
  private native void allocate(@ByVal RecordBatchVector record_batches,
                              @ByVal(nullValue = "arrow::compute::Expression(compute::literal(true))") Expression arg1);
  public InMemoryFragment(@ByVal RecordBatchVector record_batches) { super((Pointer)null); allocate(record_batches); }
  private native void allocate(@ByVal RecordBatchVector record_batches);

  public native @ByVal ScanTaskIteratorResult Scan(@SharedPtr ScanOptions options);
  public native @ByVal RecordBatchGeneratorResult ScanBatchesAsync(
        @SharedPtr ScanOptions options);
  public native @ByVal LongOptionalFuture CountRows(
        @ByVal Expression predicate,
        @SharedPtr ScanOptions options);

  public native @StdString String type_name();
}

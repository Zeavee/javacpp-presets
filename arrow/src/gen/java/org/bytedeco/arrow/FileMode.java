// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.arrow;

import com.oracle.svm.shadowed.org.bytedeco.arrow.Function;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;

import static com.oracle.svm.shadowed.org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::io") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.arrow.presets.arrow.class)
public class FileMode extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FileMode() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FileMode(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FileMode(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FileMode position(long position) {
        return (FileMode)super.position(position);
    }
    @Override public FileMode getPointer(long i) {
        return new FileMode((Pointer)this).offsetAddress(i);
    }

  public enum type { READ(0), WRITE(1), READWRITE(2);

      public final int value;
      private type(int v) { this.value = v; }
      private type(type e) { this.value = e.value; }
      public type intern() { for (type e : values()) if (e.value == value) return e; return this; }
      @Override public String toString() { return intern().name(); }
  }
}

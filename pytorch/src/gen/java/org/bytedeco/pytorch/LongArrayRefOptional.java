// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;

@NoOffset @Name("c10::optional<c10::ArrayRef<int64_t> >") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class LongArrayRefOptional extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongArrayRefOptional(Pointer p) { super(p); }
    public LongArrayRefOptional(@Cast("c10::ArrayRef<int64_t>*") LongArrayRef value) { this(); put(value); }
    public LongArrayRefOptional(@Cast({"int64_t*", "c10::ArrayRef<int64_t>", "std::vector<int64_t>&"}) @StdVector long... value) { this(); put(value); }
    public LongArrayRefOptional()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef LongArrayRefOptional put(@ByRef LongArrayRefOptional x);


    @Name("value") public native @ByRef @Cast("c10::ArrayRef<int64_t>*") LongArrayRef get();
    @ValueSetter public native LongArrayRefOptional put(@ByRef @Cast("c10::ArrayRef<int64_t>*") LongArrayRef value);
    @ValueSetter public native LongArrayRefOptional put(@ByRef @Cast({"int64_t*", "c10::ArrayRef<int64_t>", "std::vector<int64_t>&"}) @StdVector long... value);
}


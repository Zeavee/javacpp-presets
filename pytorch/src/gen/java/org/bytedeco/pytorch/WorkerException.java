// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


/** An exception thrown when a DataLoader's worker thread throws an exception,
 *  which is caught. A {@code WorkerException} stores an {@code exception_ptr} to the
 *  original exception thrown in the worker thread. */
@Namespace("torch::data") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class WorkerException extends Pointer {
    static { Loader.load(); }

  /** Constructs a {@code WorkerException} from an {@code exception_ptr}. */
  public WorkerException(@ByVal @Cast("std::exception_ptr*") Pointer original) { super((Pointer)null); allocate(original); }
  private native void allocate(@ByVal @Cast("std::exception_ptr*") Pointer original);

  public native @NoException(true) @Cast("const char*") BytePointer what();

  /** The original exception thrown in the worker thread. */
  public native @ByRef @Cast("std::exception_ptr*") Pointer original_exception(); public native WorkerException original_exception(Pointer setter);

  /** This exception's message (not the original exception's message). */
  public native @StdString BytePointer message(); public native WorkerException message(BytePointer setter);
}

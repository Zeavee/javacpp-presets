// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


/** Stores parameters in the param_group and stores a pointer to the OptimizerOptions */
@Namespace("torch::optim") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class OptimizerParamGroup extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptimizerParamGroup(Pointer p) { super(p); }

  // NOTE: In order to store `OptimizerParamGroup` in a `std::vector`, it has to be copy-constructible.
  public OptimizerParamGroup(@Const @ByRef OptimizerParamGroup param_group) { super((Pointer)null); allocate(param_group); }
  private native void allocate(@Const @ByRef OptimizerParamGroup param_group);
  public OptimizerParamGroup(@Cast({"", "std::vector<at::Tensor>"}) @StdMove TensorVector params) { super((Pointer)null); allocate(params); }
  private native void allocate(@Cast({"", "std::vector<at::Tensor>"}) @StdMove TensorVector params);
  public OptimizerParamGroup(@Cast({"", "std::vector<at::Tensor>"}) @StdMove TensorVector params, @UniquePtr OptimizerOptions options) { super((Pointer)null); allocate(params, options); }
  private native void allocate(@Cast({"", "std::vector<at::Tensor>"}) @StdMove TensorVector params, @UniquePtr OptimizerOptions options);

  public native @Cast("bool") boolean has_options();
  public native @ByRef OptimizerOptions options();
  public native void set_options(@UniquePtr OptimizerOptions options);
  public native @ByRef TensorVector params();
}

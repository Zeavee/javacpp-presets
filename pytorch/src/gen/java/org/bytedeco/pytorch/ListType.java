// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;

@Namespace("c10") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class ListType extends ListSingleElementType {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ListType(Pointer p) { super(p); }

  // It's not exactly a singleton, but there should be exactly one instance of
  // List[T] for every T

  public native @StdString BytePointer str();
  public native @SharedPtr @ByVal Type createWithContained(
        @ByVal TypeVector contained_types);

  public native @Cast("bool") boolean isSubtypeOfExt(@Const @SharedPtr @ByRef Type rhs, @Cast("std::ostream*") Pointer why_not);

  // common cast List[Tensor]
  public static native @SharedPtr ListType ofTensors();
  public static native @SharedPtr ListType ofOptionalTensors();
  public static native @SharedPtr ListType ofInts();
  public static native @SharedPtr ListType ofFloats();
  public static native @SharedPtr ListType ofComplexDoubles();
  public static native @SharedPtr ListType ofBools();
  public static native @SharedPtr ListType ofStrings();
}

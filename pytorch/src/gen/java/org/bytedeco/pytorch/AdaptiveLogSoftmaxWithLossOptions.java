// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


/** Options for the {@code AdaptiveLogSoftmaxWithLoss} module.
 * 
 *  Example:
 *  <pre>{@code
 *  AdaptiveLogSoftmaxWithLoss model(AdaptiveLogSoftmaxWithLossOptions(8, 10, {4, 8}).div_value(2.).head_bias(true));
 *  }</pre> */
@Namespace("torch::nn") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class AdaptiveLogSoftmaxWithLossOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AdaptiveLogSoftmaxWithLossOptions(Pointer p) { super(p); }

  /* implicit */ public AdaptiveLogSoftmaxWithLossOptions(@Cast("int64_t") long in_features, @Cast("int64_t") long n_classes, @ByVal @Cast("std::vector<int64_t>*") LongVector cutoffs) { super((Pointer)null); allocate(in_features, n_classes, cutoffs); }
private native void allocate(@Cast("int64_t") long in_features, @Cast("int64_t") long n_classes, @ByVal @Cast("std::vector<int64_t>*") LongVector cutoffs);
  public native @Cast("int64_t*") @ByRef @NoException(true) LongPointer in_features();
  public native @Cast("int64_t*") @ByRef @NoException(true) LongPointer n_classes();
  public native @Cast("std::vector<int64_t>*") @ByRef @NoException(true) LongVector cutoffs();
  public native @ByRef @NoException(true) DoublePointer div_value();
  public native @Cast("bool*") @ByRef @NoException(true) BoolPointer head_bias();
}

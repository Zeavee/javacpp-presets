// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::jit") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class Lexer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Lexer(Pointer p) { super(p); }

  public Lexer(@SharedPtr Source source) { super((Pointer)null); allocate(source); }
  private native void allocate(@SharedPtr Source source);
  // Return the current token, and then move to the next one
  public native @ByVal Token next();
  // Skip the current token if it matches the given kind
  public native @Cast("bool") boolean nextIf(int kind);

  public native void reportError(@StdString BytePointer what);
  public native void reportError(@StdString String what);
  public native void reportError(@StdString BytePointer what, @Const @ByRef Token t);
  public native void reportError(@StdString String what, @Const @ByRef Token t);
  public native void expected(@StdString BytePointer what, @Const @ByRef Token t);
  public native void expected(@StdString String what, @Const @ByRef Token t);
  public native void expected(@StdString BytePointer what);
  public native void expected(@StdString String what);
  // Check that the current token has a given kind, return the current token,
  // and advance to the next one.
  public native @ByVal Token expect(int kind);
  public native @ByRef Token lookahead();
  public native @ByRef Token cur();
}

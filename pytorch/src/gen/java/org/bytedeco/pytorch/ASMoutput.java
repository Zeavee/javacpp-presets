// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


/** The output of a single invocation of an AdaptiveLogSoftmaxWithLoss
 *  module's {@code forward()} method. */
@Namespace("torch::nn") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class ASMoutput extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ASMoutput(Pointer p) { super(p); }

  public ASMoutput(@ByVal Tensor output_, double loss_) { super((Pointer)null); allocate(output_, loss_); }
  private native void allocate(@ByVal Tensor output_, double loss_);

  /** Tensor containing computed target log probabilities for each example */
  public native @ByRef Tensor output(); public native ASMoutput output(Tensor setter);

  /** Scalar representing the computed negative log likelihood loss */
  public native double loss(); public native ASMoutput loss(double setter);
}

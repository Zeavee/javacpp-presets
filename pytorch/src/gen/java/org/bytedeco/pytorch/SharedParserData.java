// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


// stuff that is shared against all TC lexers/parsers and is initialized only
// once.
@Namespace("torch::jit") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class SharedParserData extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SharedParserData(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SharedParserData(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SharedParserData position(long position) {
        return (SharedParserData)super.position(position);
    }
    @Override public SharedParserData getPointer(long i) {
        return new SharedParserData((Pointer)this).offsetAddress(i);
    }

  public SharedParserData() { super((Pointer)null); allocate(); }
  private native void allocate();

  // 1. skip whitespace
  // 2. handle comment or newline
  //
  public native @Cast("bool") boolean isNumber(@StdString BytePointer str, @Cast("size_t") long start, @Cast("size_t*") SizeTPointer len);
  public native @Cast("bool") boolean isNumber(@StdString String str, @Cast("size_t") long start, @Cast("size_t*") SizeTPointer len);

  public native @Cast("bool") boolean isCharCount(@Cast("char") byte c, @StdString BytePointer str, @Cast("size_t") long start, int len);
  public native @Cast("bool") boolean isCharCount(@Cast("char") byte c, @StdString String str, @Cast("size_t") long start, int len);

  // python concatenates all adjacent strings "a" "b" == "ab"
  // strings can be enclosed with 1 or 3 single or double quotes
  // if enclosed with 3 quotes newlines are valid
  // as elsewhere, backslash and new line should be ignored
  public native @Cast("bool") boolean isString(@StdString BytePointer str, @Cast("size_t") long start, @Cast("size_t*") SizeTPointer len);
  public native @Cast("bool") boolean isString(@StdString String str, @Cast("size_t") long start, @Cast("size_t*") SizeTPointer len);

  public native @Cast("bool") boolean isblank(int n);
  // Make an exception ignoring comments for type annotation comments
  public native @Cast("bool") boolean isTypeComment(@StdString BytePointer str, @Cast("size_t") long pos);
  public native @Cast("bool") boolean isTypeComment(@StdString String str, @Cast("size_t") long pos);
  // find the longest match of str.substring(pos) against a token, return true
  // if successful filling in kind, start,and len
  public native @Cast("bool") boolean match(
        @StdString BytePointer str,
        @Cast("size_t") long pos,
        @Cast("bool") boolean continuation,
        @Cast("bool") boolean whitespace_token,
        IntPointer kind,
        @Cast("size_t*") SizeTPointer start,
        @Cast("size_t*") SizeTPointer len);
  public native @Cast("bool") boolean match(
        @StdString String str,
        @Cast("size_t") long pos,
        @Cast("bool") boolean continuation,
        @Cast("bool") boolean whitespace_token,
        IntBuffer kind,
        @Cast("size_t*") SizeTPointer start,
        @Cast("size_t*") SizeTPointer len);
  public native @Cast("bool") boolean match(
        @StdString BytePointer str,
        @Cast("size_t") long pos,
        @Cast("bool") boolean continuation,
        @Cast("bool") boolean whitespace_token,
        int[] kind,
        @Cast("size_t*") SizeTPointer start,
        @Cast("size_t*") SizeTPointer len);
  public native @Cast("bool") boolean match(
        @StdString String str,
        @Cast("size_t") long pos,
        @Cast("bool") boolean continuation,
        @Cast("bool") boolean whitespace_token,
        IntPointer kind,
        @Cast("size_t*") SizeTPointer start,
        @Cast("size_t*") SizeTPointer len);
  public native @Cast("bool") boolean match(
        @StdString BytePointer str,
        @Cast("size_t") long pos,
        @Cast("bool") boolean continuation,
        @Cast("bool") boolean whitespace_token,
        IntBuffer kind,
        @Cast("size_t*") SizeTPointer start,
        @Cast("size_t*") SizeTPointer len);
  public native @Cast("bool") boolean match(
        @StdString String str,
        @Cast("size_t") long pos,
        @Cast("bool") boolean continuation,
        @Cast("bool") boolean whitespace_token,
        int[] kind,
        @Cast("size_t*") SizeTPointer start,
        @Cast("size_t*") SizeTPointer len);
  public native @Cast("bool") boolean isUnary(int kind, IntPointer prec);
  public native @Cast("bool") boolean isUnary(int kind, IntBuffer prec);
  public native @Cast("bool") boolean isUnary(int kind, int[] prec);
  public native @Cast("bool") boolean isBinary(int kind, IntPointer prec);
  public native @Cast("bool") boolean isBinary(int kind, IntBuffer prec);
  public native @Cast("bool") boolean isBinary(int kind, int[] prec);
  public native @Cast("bool") boolean isRightAssociative(int kind);
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::jit") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class CompleteArgumentSpec extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CompleteArgumentSpec(Pointer p) { super(p); }

  // NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)
  public CompleteArgumentSpec(@Cast("bool") boolean with_grad, @ByVal IValueArrayRef inputs) { super((Pointer)null); allocate(with_grad, inputs); }
  private native void allocate(@Cast("bool") boolean with_grad, @ByVal IValueArrayRef inputs);

  // equality is fast: check ninputs, and then check the raw array data,
  // there are no size/stride indirections
  public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef CompleteArgumentSpec spec);
  public native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef CompleteArgumentSpec spec);
  public native @ByVal CompleteArgumentInfo at(@Cast("size_t") long i);
  public native @Cast("size_t") long size();
  public native @Cast("size_t") @Name("hashCode") long _hashCode();
}

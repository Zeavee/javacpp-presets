// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


@Name("torch::jit::Const") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class ConstExpr extends Expr {
    static { Loader.load(); }

  public ConstExpr(@Cast("const torch::jit::TreeRef*") @ByRef Pointer tree) { super((Pointer)null); allocate(tree); }
  private native void allocate(@Cast("const torch::jit::TreeRef*") @ByRef Pointer tree);
  public native @Cast("bool") boolean isFloatingPoint();
  public native @Cast("bool") boolean isIntegral();
  public native @Cast("bool") boolean isComplex();
  public native @Cast("int64_t") long asIntegral();
  public native double asFloatingPoint();
  public native @StdString BytePointer text();
  public static native @ByVal ConstExpr create(@Const @ByRef SourceRange range, @StdString BytePointer value);
  public static native @ByVal ConstExpr create(@Const @ByRef SourceRange range, @StdString String value);
}

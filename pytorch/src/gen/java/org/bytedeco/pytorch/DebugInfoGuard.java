// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


// DebugInfoGuard is used to set debug information,
// ThreadLocalDebugInfo is semantically immutable, the values are set
// through the scope-based guard object.
// Nested DebugInfoGuard adds/overrides existing values in the scope,
// restoring the original values after exiting the scope.
// Users can access the values through the ThreadLocalDebugInfo::get() call;
@Namespace("c10") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class DebugInfoGuard extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DebugInfoGuard(Pointer p) { super(p); }

  public DebugInfoGuard(DebugInfoKind kind, @SharedPtr DebugInfoBase info) { super((Pointer)null); allocate(kind, info); }
  private native void allocate(DebugInfoKind kind, @SharedPtr DebugInfoBase info);
  public DebugInfoGuard(@Cast("c10::DebugInfoKind") byte kind, @SharedPtr DebugInfoBase info) { super((Pointer)null); allocate(kind, info); }
  private native void allocate(@Cast("c10::DebugInfoKind") byte kind, @SharedPtr DebugInfoBase info);

  public DebugInfoGuard(@SharedPtr ThreadLocalDebugInfo info) { super((Pointer)null); allocate(info); }
  private native void allocate(@SharedPtr ThreadLocalDebugInfo info);

  
  
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


@Name("c10::VaryingShape<c10::Stride>") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class StrideVaryingShape extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StrideVaryingShape(Pointer p) { super(p); }

  public StrideVaryingShape(@Const @ByRef StrideVector vec) { super((Pointer)null); allocate(vec); }
  private native void allocate(@Const @ByRef StrideVector vec);

  public StrideVaryingShape(@ByVal StrideArrayRef vec) { super((Pointer)null); allocate(vec); }
  private native void allocate(@ByVal StrideArrayRef vec);

  public StrideVaryingShape(@ByVal(nullValue = "c10::optional<size_t>(c10::nullopt)") SizeTOptional size) { super((Pointer)null); allocate(size); }
  private native void allocate(@ByVal(nullValue = "c10::optional<size_t>(c10::nullopt)") SizeTOptional size);
  public StrideVaryingShape() { super((Pointer)null); allocate(); }
  private native void allocate();

  public StrideVaryingShape(@StdVector StrideOptional dims) { super((Pointer)null); allocate(dims); }
  private native void allocate(@StdVector StrideOptional dims);

  public StrideVaryingShape(@Cast("size_t") long size) { super((Pointer)null); allocate(size); }
  private native void allocate(@Cast("size_t") long size);

  

  public native @Const @ByRef @Name("operator []") StrideOptional get(@Cast("size_t") long i);

  public native @ByVal SizeTOptional size();

  public native @Cast("const c10::optional<c10::VaryingShape<c10::Stride>::ListOfOptionalElements>*") @ByRef Pointer sizes();

  public native @ByVal StrideVaryingShape merge(@Const @ByRef StrideVaryingShape other);

  public native @ByVal StrideVectorOptional concrete_sizes();

  public native @Cast("bool") boolean isComplete();
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::optim") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class LBFGSOptions extends OptimizerCloneableLBFGSOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LBFGSOptions(Pointer p) { super(p); }

  public LBFGSOptions(double lr/*=1*/) { super((Pointer)null); allocate(lr); }
  private native void allocate(double lr/*=1*/);
  public LBFGSOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  public native @ByRef @NoException(true) DoublePointer lr();
  public native @Cast("int64_t*") @ByRef @NoException(true) LongPointer max_iter();
  public native @ByRef @NoException(true) LongOptional max_eval();
  public native @ByRef @NoException(true) DoublePointer tolerance_grad();
  public native @ByRef @NoException(true) DoublePointer tolerance_change();
  public native @Cast("int64_t*") @ByRef @NoException(true) LongPointer history_size();
  public native @ByRef @NoException(true) StringOptional line_search_fn();
  
  
  
  public native double get_lr();
  public native void set_lr(double lr);
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;

@Name("std::unordered_map<torch::jit::ArgumentSpec,torch::jit::ExecutionPlan>") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class ArgumentSpecExecutionPlanMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ArgumentSpecExecutionPlanMap(Pointer p) { super(p); }
    public ArgumentSpecExecutionPlanMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef ArgumentSpecExecutionPlanMap put(@ByRef ArgumentSpecExecutionPlanMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index public native @ByRef ExecutionPlan get(@ByRef ArgumentSpec i);
    public native ArgumentSpecExecutionPlanMap put(@ByRef ArgumentSpec i, ExecutionPlan value);

    public native void erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator ++") @ByRef Iterator increment();
        public native @Name("operator ==") boolean equals(@ByRef Iterator it);
        public native @Name("operator *().first") @MemberGetter @ByRef @Const ArgumentSpec first();
        public native @Name("operator *().second") @MemberGetter @ByRef @Const ExecutionPlan second();
    }
}


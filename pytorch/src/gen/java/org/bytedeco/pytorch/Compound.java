// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::jit") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class Compound extends Tree {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Compound(Pointer p) { super(p); }

  public Compound(int kind, @ByVal SourceRange range) { super((Pointer)null); allocate(kind, range); }
  private native void allocate(int kind, @ByVal SourceRange range);
  public Compound(int kind, @Const @ByRef SourceRange range_, @Cast("torch::jit::TreeList*") @ByRef(true) Pointer trees_) { super((Pointer)null); allocate(kind, range_, trees_); }
  private native void allocate(int kind, @Const @ByRef SourceRange range_, @Cast("torch::jit::TreeList*") @ByRef(true) Pointer trees_);
  public native @Cast("const torch::jit::TreeList*") @ByRef Pointer trees();
  public static native @ByVal @Cast("torch::jit::TreeRef*") Pointer create(
        int kind,
        @Const @ByRef SourceRange range_,
        @Cast("torch::jit::TreeList*") @ByRef(true) Pointer trees_);
  public native @Cast("bool") boolean isAtom();
  

  public native @Const @ByRef SourceRange range();
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;
 // namespace functional

// ============================================================================

/** Options for the {@code KLDivLoss} module.
 * 
 *  Example:
 *  <pre>{@code
 *  KLDivLoss model(KLDivLossOptions().reduction(torch::kNone).log_target(false));
 *  }</pre> */
@Namespace("torch::nn") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class KLDivLossOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public KLDivLossOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public KLDivLossOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public KLDivLossOptions position(long position) {
        return (KLDivLossOptions)super.position(position);
    }
    @Override public KLDivLossOptions getPointer(long i) {
        return new KLDivLossOptions((Pointer)this).offsetAddress(i);
    }


  public KLDivLossOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
public KLDivLossOptions(@ByVal kNone reduction) { super((Pointer)null); allocate(reduction); }
private native void allocate(@ByVal kNone reduction);
public KLDivLossOptions(@ByVal kBatchMean reduction) { super((Pointer)null); allocate(reduction); }
private native void allocate(@ByVal kBatchMean reduction);
public KLDivLossOptions(@ByVal kSum reduction) { super((Pointer)null); allocate(reduction); }
private native void allocate(@ByVal kSum reduction);
public KLDivLossOptions(@ByVal kMean reduction) { super((Pointer)null); allocate(reduction); }
private native void allocate(@ByVal kMean reduction);
  public native @ByRef @NoException(true) kldiv_loss_reduction_t reduction();
  public native @Cast("bool*") @ByRef @NoException(true) BoolPointer log_target();
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;

@NoOffset @Name("std::pair<std::string,c10::IValue>") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class EnumNameValue extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EnumNameValue(Pointer p) { super(p); }
    public EnumNameValue(BytePointer firstValue, IValue secondValue) { this(); put(firstValue, secondValue); }
    public EnumNameValue(String firstValue, IValue secondValue) { this(); put(firstValue, secondValue); }
    public EnumNameValue()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef EnumNameValue put(@ByRef EnumNameValue x);


    @MemberGetter public native @StdString BytePointer first(); public native EnumNameValue first(BytePointer first);
    @MemberGetter public native @ByRef IValue second();  public native EnumNameValue second(IValue second);
    @MemberSetter @Index public native EnumNameValue first(@StdString String first);

    public EnumNameValue put(BytePointer firstValue, IValue secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }

    public EnumNameValue put(String firstValue, IValue secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}


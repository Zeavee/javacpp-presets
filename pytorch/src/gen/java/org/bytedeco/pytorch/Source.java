// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


// Source represents a code segment. It keeps track of:
//  - text : the text of the code segment
//  - filename (optional) : if present, represents the name of the file from
//                          which the code segment originated.
//  - starting_line_no : represents the line in the original file where the
//                       code segment started.
@Namespace("torch::jit") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class Source extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Source(Pointer p) { super(p); }

  public Source(
        @StdString BytePointer text,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text, gen_ranges); }
  private native void allocate(
        @StdString BytePointer text,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @StdString BytePointer text) { super((Pointer)null); allocate(text); }
  private native void allocate(
        @StdString BytePointer text);
  public Source(
        @StdString String text,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text, gen_ranges); }
  private native void allocate(
        @StdString String text,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @StdString String text) { super((Pointer)null); allocate(text); }
  private native void allocate(
        @StdString String text);

  public Source(
        @StdString BytePointer text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text, filename, starting_line_no, gen_ranges); }
  private native void allocate(
        @StdString BytePointer text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @StdString BytePointer text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no) { super((Pointer)null); allocate(text, filename, starting_line_no); }
  private native void allocate(
        @StdString BytePointer text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no);
  public Source(
        @StdString String text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text, filename, starting_line_no, gen_ranges); }
  private native void allocate(
        @StdString String text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @StdString String text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no) { super((Pointer)null); allocate(text, filename, starting_line_no); }
  private native void allocate(
        @StdString String text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no);

  // Given a line number (within source_), return the byte offset of the
  // beginning of that line.
  public native @Cast("size_t") long offset_for_line(@Cast("size_t") long line);

  // Returns number of lines present.
  public native @Cast("size_t") long num_lines();

  // Calculate the line (within the code segment) on which `offset` resides.
  public native @Cast("size_t") long lineno_for_offset(@Cast("size_t") long offset);

  // Calculate the line (within the original source file, if present) on which
  // `lineno` resides.
  public native @Cast("size_t") long lineno_to_source_lineno(@Cast("size_t") long lineno);

  public native @StdString BytePointer text();

  public native @Const @ByRef StringOptional filename();

  public native @Cast("size_t") long starting_line_no();

  
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::jit") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class Scope extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Scope(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Scope(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Scope position(long position) {
        return (Scope)super.position(position);
    }
    @Override public Scope getPointer(long i) {
        return new Scope((Pointer)this).offsetAddress(i);
    }

  public Scope() { super((Pointer)null); allocate(); }
  private native void allocate();

  public Scope(@ByVal @Cast("torch::jit::ScopePtr*") Pointer parent, @ByVal Symbol name) { super((Pointer)null); allocate(parent, name); }
  private native void allocate(@ByVal @Cast("torch::jit::ScopePtr*") Pointer parent, @ByVal Symbol name);

  public native @ByVal @Cast("torch::jit::ScopePtr*") Pointer push(@ByVal Symbol name);

  public native @ByVal @Cast("torch::jit::ScopePtr*") Pointer parent();

  public native @Cast("bool") boolean isRoot();

  public native @Cast("bool") boolean isBlank();

  public native @ByVal @Cast("torch::jit::ScopePtr*") Pointer getRoot();

  public native @Cast("size_t") long getDepth();

  public native @ByVal Symbol name();

  public native @StdString BytePointer namesFromRoot(@StdString BytePointer separator/*="/"*/);
  public native @StdString BytePointer namesFromRoot();
  public native @StdString String namesFromRoot(@StdString String separator/*="/"*/);
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


// NOTE [What is TorchDispatchTypeObject?]
// A TorchDispatchTypeObject represents the type of a Tensor subclass that has
// a __torch_dispatch__ classmethod. Concretely, it holds the class as a
// PyObject* and a PyInterpreter* that says which python interpreter the class
// came from.
//
// See NOTE [dispatch_fn's type argument] for more details
@Namespace("c10") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class TorchDispatchTypeObject extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TorchDispatchTypeObject(Pointer p) { super(p); }

  // Steals a reference to type_object
  public TorchDispatchTypeObject(
        @Cast("PyObject*") Pointer type_object,
        @Cast("c10::impl::PyInterpreter*") Pointer pyinterpreter) { super((Pointer)null); allocate(type_object, pyinterpreter); }
  private native void allocate(
        @Cast("PyObject*") Pointer type_object,
        @Cast("c10::impl::PyInterpreter*") Pointer pyinterpreter);

  // Releases the stolen reference to type_object

  public native @Cast("c10::impl::PyInterpreter*") Pointer pyinterpreter();
  public native @Cast("PyObject*") Pointer ptr();
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;


/**
 * A type id is a unique id for a given C++ type.
 * You need to register your types using CAFFE_KNOWN_TYPE(MyType) to be able to
 * use TypeIdentifier with custom types. This is for example used to store the
 * dtype of tensors.
 */
@Namespace("caffe2") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class TypeIdentifier extends TypeIdentifierIdWrapper {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TypeIdentifier(Pointer p) { super(p); }

  
  

  /**
   * Returns the unique id for the given type T. The id is unique for the type T
   * in the sense that for any two different types, their ids are different; for
   * the same type T, the id remains the same over different calls of the
   * function. However, this is not guaranteed over different runs, as the id
   * is generated during run-time. Do NOT serialize the id for storage.
   */

  public static native @Const @ByVal TypeIdentifier uninitialized();
}

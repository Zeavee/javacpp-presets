// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.pytorch;

import com.oracle.svm.shadowed.org.bytedeco.pytorch.Allocator;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Function;
import com.oracle.svm.shadowed.org.bytedeco.pytorch.Module;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.pytorch.global.torch.*;

@NoOffset @Name("std::tuple<std::string,size_t,size_t>") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.pytorch.presets.torch.class)
public class StringSizeTSizeTTuple extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringSizeTSizeTTuple(Pointer p) { super(p); }
    public StringSizeTSizeTTuple(@StdString BytePointer value0, @Cast("size_t") long value1, @Cast("size_t") long value2) { allocate(value0, value1, value2); }
    private native void allocate(@StdString BytePointer value0, @Cast("size_t") long value1, @Cast("size_t") long value2);
    public StringSizeTSizeTTuple()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef StringSizeTSizeTTuple put(@ByRef StringSizeTSizeTTuple x);

    public @StdString BytePointer get0() { return get0(this); }
    @Namespace @Name("std::get<0>") public static native @StdString BytePointer get0(@ByRef StringSizeTSizeTTuple container);
    public @Cast("size_t") long get1() { return get1(this); }
    @Namespace @Name("std::get<1>") public static native @Cast("size_t") long get1(@ByRef StringSizeTSizeTTuple container);
    public @Cast("size_t") long get2() { return get2(this); }
    @Namespace @Name("std::get<2>") public static native @Cast("size_t") long get2(@ByRef StringSizeTSizeTTuple container);
}


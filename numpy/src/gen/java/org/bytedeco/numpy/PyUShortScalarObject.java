// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.numpy;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;
import com.oracle.svm.shadowed.org.bytedeco.cpython.*;
import static com.oracle.svm.shadowed.org.bytedeco.cpython.global.python.*;

import static com.oracle.svm.shadowed.org.bytedeco.numpy.global.numpy.*;



@Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.numpy.presets.numpy.class)
public class PyUShortScalarObject extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyUShortScalarObject() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyUShortScalarObject(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyUShortScalarObject(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyUShortScalarObject position(long position) {
        return (PyUShortScalarObject)super.position(position);
    }
    @Override public PyUShortScalarObject getPointer(long i) {
        return new PyUShortScalarObject((Pointer)this).offsetAddress(i);
    }

        public native @ByRef PyObject ob_base(); public native PyUShortScalarObject ob_base(PyObject setter);
        public native @Cast("unsigned short") short obval(); public native PyUShortScalarObject obval(short setter);
}

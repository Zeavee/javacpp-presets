// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_stitching;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_core.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_core.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_imgproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_imgproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_imgcodecs.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_videoio.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_videoio.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_highgui.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_highgui.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_flann.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_flann.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_features2d.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_features2d.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_calib3d.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_calib3d.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_objdetect.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_objdetect.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_dnn.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_dnn.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_video.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_video.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_ml.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_ml.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_shape.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_shape.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_xfeatures2d.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_xfeatures2d.*;

import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_stitching.*;


/** \addtogroup stitching_match
 *  \{
<p>
/** \brief Structure containing image keypoints and descriptors. */
@Namespace("cv::detail") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.opencv.presets.opencv_stitching.class)
public class ImageFeatures extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ImageFeatures() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImageFeatures(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImageFeatures(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ImageFeatures position(long position) {
        return (ImageFeatures)super.position(position);
    }
    @Override public ImageFeatures getPointer(long i) {
        return new ImageFeatures((Pointer)this).offsetAddress(i);
    }

    public native int img_idx(); public native ImageFeatures img_idx(int setter);
    public native @ByRef Size img_size(); public native ImageFeatures img_size(Size setter);
    public native @ByRef KeyPointVector keypoints(); public native ImageFeatures keypoints(KeyPointVector setter);
    public native @ByRef UMat descriptors(); public native ImageFeatures descriptors(UMat setter);
    public native @ByVal KeyPointVector getKeypoints();
}

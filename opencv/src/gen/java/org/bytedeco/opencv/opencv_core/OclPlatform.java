// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_core;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;

import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_core.*;


/** @deprecated */
@Name("cv::ocl::Platform") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.opencv.presets.opencv_core.class)
public class OclPlatform extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OclPlatform(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OclPlatform(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OclPlatform position(long position) {
        return (OclPlatform)super.position(position);
    }
    @Override public OclPlatform getPointer(long i) {
        return new OclPlatform((Pointer)this).offsetAddress(i);
    }

    public OclPlatform() { super((Pointer)null); allocate(); }
    @NoException private native void allocate();
    public OclPlatform(@Const @ByRef OclPlatform p) { super((Pointer)null); allocate(p); }
    private native void allocate(@Const @ByRef OclPlatform p);
    public native @ByRef @Name("operator =") OclPlatform put(@Const @ByRef OclPlatform p);

    public native Pointer ptr();

    /** @deprecated */
    public static native @ByRef OclPlatform getDefault();

    @Opaque public static class Impl extends Pointer {
        /** Empty constructor. Calls {@code super((Pointer)null)}. */
        public Impl() { super((Pointer)null); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public Impl(Pointer p) { super(p); }
    }
    public native Impl getImpl();
    public native @Cast("bool") boolean empty();
}

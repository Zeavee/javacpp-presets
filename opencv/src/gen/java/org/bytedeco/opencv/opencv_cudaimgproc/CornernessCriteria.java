// Targeted by JavaCPP version 1.5.2: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_cudaimgproc;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_core.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_core.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_imgproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_imgproc.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_cudaarithm.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_cudaarithm.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_cudafilters.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_cudafilters.*;

import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_cudaimgproc.*;


/** \} cudaimgproc_hough
<p>
////////////////////////// Corners Detection ///////////////////////////
 <p>
 *  \addtogroup cudaimgproc_feature
 *  \{
<p>
/** \brief Base class for Cornerness Criteria computation. :
 */
@Namespace("cv::cuda") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.opencv.presets.opencv_cudaimgproc.class)
public class CornernessCriteria extends Algorithm {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CornernessCriteria(Pointer p) { super(p); }

    /** \brief Computes the cornerness criteria at each image pixel.
    <p>
    @param src Source image.
    @param dst Destination image containing cornerness values. It will have the same size as src and
    CV_32FC1 type.
    @param stream Stream for the asynchronous version.
     */
    public native void compute(@ByVal Mat src, @ByVal Mat dst, @ByRef(nullValue = "cv::cuda::Stream::Null()") Stream stream);
    public native void compute(@ByVal Mat src, @ByVal Mat dst);
    public native void compute(@ByVal UMat src, @ByVal UMat dst, @ByRef(nullValue = "cv::cuda::Stream::Null()") Stream stream);
    public native void compute(@ByVal UMat src, @ByVal UMat dst);
    public native void compute(@ByVal GpuMat src, @ByVal GpuMat dst, @ByRef(nullValue = "cv::cuda::Stream::Null()") Stream stream);
    public native void compute(@ByVal GpuMat src, @ByVal GpuMat dst);
}

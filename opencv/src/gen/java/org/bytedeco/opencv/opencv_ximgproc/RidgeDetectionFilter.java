// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_ximgproc;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_core.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_core.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_imgproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_imgproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_imgcodecs.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_videoio.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_videoio.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_highgui.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_highgui.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_flann.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_flann.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_features2d.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_features2d.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_calib3d.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_calib3d.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_dnn.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_dnn.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_video.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_video.*;

import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_ximgproc.*;


/** \addtogroup ximgproc_filters
 *  \{
<p>
/** \brief  Applies Ridge Detection Filter to an input image.
Implements Ridge detection similar to the one in [Mathematica](http://reference.wolfram.com/language/ref/RidgeFilter.html)
using the eigen values from the Hessian Matrix of the input image using Sobel Derivatives.
Additional refinement can be done using Skeletonization and Binarization. Adapted from \cite segleafvein and \cite M_RF
<p>
*/
@Namespace("cv::ximgproc") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.opencv.presets.opencv_ximgproc.class)
public class RidgeDetectionFilter extends Algorithm {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RidgeDetectionFilter(Pointer p) { super(p); }

    /**
    \brief Create pointer to the Ridge detection filter.
    @param ddepth  Specifies output image depth. Defualt is CV_32FC1
    @param dx Order of derivative x, default is 1
    @param dy  Order of derivative y, default is 1
    @param ksize Sobel kernel size , default is 3
    @param out_dtype Converted format for output, default is CV_8UC1
    @param scale Optional scale value for derivative values, default is 1
    @param delta  Optional bias added to output, default is 0
    @param borderType Pixel extrapolation method, default is BORDER_DEFAULT
    @see Sobel, threshold, getStructuringElement, morphologyEx.( for additional refinement)
    */
    public static native @Ptr RidgeDetectionFilter create(int ddepth/*=CV_32FC1*/, int dx/*=1*/, int dy/*=1*/, int ksize/*=3*/, int out_dtype/*=CV_8UC1*/, double scale/*=1*/, double delta/*=0*/, int borderType/*=cv::BORDER_DEFAULT*/);
    public static native @Ptr RidgeDetectionFilter create();
    /**
    \brief Apply Ridge detection filter on input image.
    @param _img InputArray as supported by Sobel. img can be 1-Channel or 3-Channels.
    @param out OutputAray of structure as RidgeDetectionFilter::ddepth. Output image with ridges.
    */
    public native void getRidgeFilteredImage(@ByVal Mat _img, @ByVal Mat out);
    public native void getRidgeFilteredImage(@ByVal UMat _img, @ByVal UMat out);
    public native void getRidgeFilteredImage(@ByVal GpuMat _img, @ByVal GpuMat out);
}

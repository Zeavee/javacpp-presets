// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.onnxruntime;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.opencl.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencl.global.OpenCL.*;
import com.oracle.svm.shadowed.org.bytedeco.dnnl.*;
import static com.oracle.svm.shadowed.org.bytedeco.dnnl.global.dnnl.*;

import static com.oracle.svm.shadowed.org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Used internally by the C++ API. C++ wrapper types inherit from this
* 
* This is a zero cost abstraction to wrap the C API objects and delete them on destruction.
* There is a secondary class 'Unowned<T>' that is used to prevent deletion on destruction (Used for return types that are
* not owned by the caller)
* 
*/
@Name("Ort::Base<OrtArenaCfg>") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class BaseArenaCfg extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BaseArenaCfg(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BaseArenaCfg(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public BaseArenaCfg position(long position) {
        return (BaseArenaCfg)super.position(position);
    }
    @Override public BaseArenaCfg getPointer(long i) {
        return new BaseArenaCfg((Pointer)this).offsetAddress(i);
    }


  public BaseArenaCfg() { super((Pointer)null); allocate(); }
  private native void allocate();
  public BaseArenaCfg(OrtArenaCfg p) { super((Pointer)null); allocate(p); }
  private native void allocate(OrtArenaCfg p);

  public native @Name("operator OrtArenaCfg*") OrtArenaCfg asOrtArenaCfg();

  /** \brief Releases ownership of the contained pointer */
  public native OrtArenaCfg release();
}

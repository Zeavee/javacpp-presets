// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.onnxruntime;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.opencl.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencl.global.OpenCL.*;
import com.oracle.svm.shadowed.org.bytedeco.dnnl.*;
import static com.oracle.svm.shadowed.org.bytedeco.dnnl.global.dnnl.*;

import static com.oracle.svm.shadowed.org.bytedeco.onnxruntime.global.onnxruntime.*;


@Namespace("Ort") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class IoBinding extends BaseIoBinding {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IoBinding(Pointer p) { super(p); }

  public IoBinding(@ByRef Session session) { super((Pointer)null); allocate(session); }
  private native void allocate(@ByRef Session session);
  public native void BindInput(@Cast("const char*") BytePointer name, @StdMove Value arg1);
  public native void BindInput(String name, @StdMove Value arg1);
  public native void BindOutput(@Cast("const char*") BytePointer name, @StdMove Value arg1);
  public native void BindOutput(String name, @StdMove Value arg1);
  public native void BindOutput(@Cast("const char*") BytePointer name, @Const @ByRef MemoryInfo arg1);
  public native void BindOutput(String name, @Const @ByRef MemoryInfo arg1);
  public native @ByVal StringVector GetOutputNames();
  public native @ByVal StringVector GetOutputNames(@ByRef Allocator arg0);
  public native @StdMove ValueVector GetOutputValues();
  public native @StdMove ValueVector GetOutputValues(@ByRef Allocator arg0);
  public native void ClearBoundInputs();
  public native void ClearBoundOutputs();
  public native void SynchronizeInputs();
  public native void SynchronizeOutputs();
}

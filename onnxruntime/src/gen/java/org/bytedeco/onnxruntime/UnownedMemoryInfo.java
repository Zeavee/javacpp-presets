// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.onnxruntime;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.opencl.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencl.global.OpenCL.*;
import com.oracle.svm.shadowed.org.bytedeco.dnnl.*;
import static com.oracle.svm.shadowed.org.bytedeco.dnnl.global.dnnl.*;

import static com.oracle.svm.shadowed.org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Wraps an object that inherits from Ort::Base and stops it from deleting the contained pointer on destruction
* 
* This has the effect of making it not own the memory held by Ort::Base.
*/
@Name("Ort::Unowned<const Ort::MemoryInfo>") @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class UnownedMemoryInfo extends MemoryInfo {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UnownedMemoryInfo(Pointer p) { super(p); }

}

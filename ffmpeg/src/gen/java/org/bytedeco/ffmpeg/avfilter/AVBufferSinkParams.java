// Targeted by JavaCPP version 1.5.2: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avfilter;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avutil.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avutil.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.swresample.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.swresample.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avcodec.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avcodec.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avformat.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avformat.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.postproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.postproc.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.swscale.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.swscale.*;

import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avfilter.*;


/**
 * Struct to use for initializing a buffersink context.
 */
@Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.ffmpeg.presets.avfilter.class)
public class AVBufferSinkParams extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public AVBufferSinkParams() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AVBufferSinkParams(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AVBufferSinkParams(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public AVBufferSinkParams position(long position) {
        return (AVBufferSinkParams)super.position(position);
    }

    /** list of allowed pixel formats, terminated by AV_PIX_FMT_NONE */
    public native @Cast("const AVPixelFormat*") IntPointer pixel_fmts(); public native AVBufferSinkParams pixel_fmts(IntPointer setter);
}

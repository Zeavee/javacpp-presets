// Targeted by JavaCPP version 1.5.2: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avfilter;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avutil.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avutil.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.swresample.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.swresample.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avcodec.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avcodec.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avformat.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avformat.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.postproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.postproc.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.swscale.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.swscale.*;

import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avfilter.*;


/**
 * A linked-list of the inputs/outputs of the filter chain.
 *
 * This is mainly useful for avfilter_graph_parse() / avfilter_graph_parse2(),
 * where it is used to communicate open (unlinked) inputs and outputs from and
 * to the caller.
 * This struct specifies, per each not connected pad contained in the graph, the
 * filter context and the pad index required for establishing a link.
 */
@Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.ffmpeg.presets.avfilter.class)
public class AVFilterInOut extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public AVFilterInOut() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AVFilterInOut(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AVFilterInOut(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public AVFilterInOut position(long position) {
        return (AVFilterInOut)super.position(position);
    }

    /** unique name for this input/output in the list */
    public native @Cast("char*") BytePointer name(); public native AVFilterInOut name(BytePointer setter);

    /** filter context associated to this input/output */
    public native AVFilterContext filter_ctx(); public native AVFilterInOut filter_ctx(AVFilterContext setter);

    /** index of the filt_ctx pad to use for linking */
    public native int pad_idx(); public native AVFilterInOut pad_idx(int setter);

    /** next input/input in the list, NULL if this is the last */
    public native AVFilterInOut next(); public native AVFilterInOut next(AVFilterInOut setter);
}

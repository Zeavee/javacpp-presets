// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avcodec;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avutil.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avutil.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.swresample.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.swresample.*;

import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avcodec.*;


@Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.ffmpeg.presets.avcodec.class)
public class FFTComplex extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FFTComplex() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FFTComplex(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FFTComplex(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FFTComplex position(long position) {
        return (FFTComplex)super.position(position);
    }
    @Override public FFTComplex getPointer(long i) {
        return new FFTComplex((Pointer)this).offsetAddress(i);
    }

    public native @Cast("FFTSample") float re(); public native FFTComplex re(float setter);
    public native @Cast("FFTSample") float im(); public native FFTComplex im(float setter);
}

// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avdevice;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avutil.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avutil.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.swresample.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.swresample.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avcodec.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avcodec.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avformat.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avformat.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.postproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.postproc.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.swscale.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.swscale.*;
import com.oracle.svm.shadowed.org.bytedeco.ffmpeg.avfilter.*;
import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avfilter.*;

import static com.oracle.svm.shadowed.org.bytedeco.ffmpeg.global.avdevice.*;

// #endif

/**
 * Structure describes basic parameters of the device.
 */
@Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.ffmpeg.presets.avdevice.class)
public class AVDeviceInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public AVDeviceInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AVDeviceInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AVDeviceInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public AVDeviceInfo position(long position) {
        return (AVDeviceInfo)super.position(position);
    }
    @Override public AVDeviceInfo getPointer(long i) {
        return new AVDeviceInfo((Pointer)this).offsetAddress(i);
    }

    /** device name, format depends on device */
    public native @Cast("char*") BytePointer device_name(); public native AVDeviceInfo device_name(BytePointer setter);
    /** human friendly name */
    public native @Cast("char*") BytePointer device_description(); public native AVDeviceInfo device_description(BytePointer setter);
    /** array indicating what media types(s), if any, a device can provide. If null, cannot provide any */
    public native @Cast("AVMediaType*") IntPointer media_types(); public native AVDeviceInfo media_types(IntPointer setter);
    /** length of media_types array, 0 if device cannot provide any media types */
    public native int nb_media_types(); public native AVDeviceInfo nb_media_types(int setter);
}

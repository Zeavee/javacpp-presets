// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.openpose;

import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.Index;
import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas_nolapack.*;
import static com.oracle.svm.shadowed.org.bytedeco.openblas.global.openblas.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_core.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_core.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_imgproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_imgproc.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_imgcodecs.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_videoio.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_videoio.*;
import com.oracle.svm.shadowed.org.bytedeco.opencv.opencv_highgui.*;
import static com.oracle.svm.shadowed.org.bytedeco.opencv.global.opencv_highgui.*;
import com.oracle.svm.shadowed.org.bytedeco.hdf5.*;
import static com.oracle.svm.shadowed.org.bytedeco.hdf5.global.hdf5.*;
import com.oracle.svm.shadowed.org.bytedeco.caffe.*;
import static com.oracle.svm.shadowed.org.bytedeco.caffe.global.caffe.*;

import static com.oracle.svm.shadowed.org.bytedeco.openpose.global.openpose.*;

    @Name("op::Worker<std::shared_ptr<std::vector<std::shared_ptr<op::Datum> > > >") @NoOffset @Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.openpose.presets.openpose.class)
public class DatumsWorker extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public DatumsWorker(Pointer p) { super(p); }
    

        public native void initializationOnThreadNoException();

        public native @Cast("bool") boolean checkAndWork(@SharedPtr @ByRef Datums tDatums);

        public native @Cast("bool") boolean isRunning();

        public native void stop();

        // Virtual in case some function needs spetial stopping (e.g., buffers might not stop inmediately and need a
        // few iterations)
        public native void tryStop();
    }

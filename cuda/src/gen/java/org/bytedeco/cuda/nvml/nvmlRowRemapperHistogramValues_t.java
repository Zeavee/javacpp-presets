// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.cuda.nvml;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.cuda.cudart.*;
import static com.oracle.svm.shadowed.org.bytedeco.cuda.global.cudart.*;

import static com.oracle.svm.shadowed.org.bytedeco.cuda.global.nvml.*;


/**
 * Possible values that classify the remap availability for each bank. The max
 * field will contain the number of banks that have maximum remap availability
 * (all reserved rows are available). None means that there are no reserved
 * rows available.
 */
@Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.cuda.presets.nvml.class)
public class nvmlRowRemapperHistogramValues_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public nvmlRowRemapperHistogramValues_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public nvmlRowRemapperHistogramValues_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public nvmlRowRemapperHistogramValues_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public nvmlRowRemapperHistogramValues_t position(long position) {
        return (nvmlRowRemapperHistogramValues_t)super.position(position);
    }
    @Override public nvmlRowRemapperHistogramValues_t getPointer(long i) {
        return new nvmlRowRemapperHistogramValues_t((Pointer)this).offsetAddress(i);
    }

    public native @Cast("unsigned int") int max(); public native nvmlRowRemapperHistogramValues_t max(int setter);
    public native @Cast("unsigned int") int high(); public native nvmlRowRemapperHistogramValues_t high(int setter);
    public native @Cast("unsigned int") int partial(); public native nvmlRowRemapperHistogramValues_t partial(int setter);
    public native @Cast("unsigned int") int low(); public native nvmlRowRemapperHistogramValues_t low(int setter);
    public native @Cast("unsigned int") int none(); public native nvmlRowRemapperHistogramValues_t none(int setter);
}

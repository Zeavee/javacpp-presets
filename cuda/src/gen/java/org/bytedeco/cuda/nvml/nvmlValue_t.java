// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package com.oracle.svm.shadowed.org.bytedeco.cuda.nvml;

import java.nio.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.javacpp.annotation.*;

import static com.oracle.svm.shadowed.org.bytedeco.javacpp.presets.javacpp.*;
import com.oracle.svm.shadowed.org.bytedeco.cuda.cudart.*;
import static com.oracle.svm.shadowed.org.bytedeco.cuda.global.cudart.*;

import static com.oracle.svm.shadowed.org.bytedeco.cuda.global.nvml.*;



/**
 * Union to represent different types of Value
 */
@Properties(inherit = com.oracle.svm.shadowed.org.bytedeco.cuda.presets.nvml.class)
public class nvmlValue_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public nvmlValue_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public nvmlValue_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public nvmlValue_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public nvmlValue_t position(long position) {
        return (nvmlValue_t)super.position(position);
    }
    @Override public nvmlValue_t getPointer(long i) {
        return new nvmlValue_t((Pointer)this).offsetAddress(i);
    }

    /** If the value is double */
    public native double dVal(); public native nvmlValue_t dVal(double setter);
    /** If the value is unsigned int */
    public native @Cast("unsigned int") int uiVal(); public native nvmlValue_t uiVal(int setter);
    /** If the value is unsigned long */
    public native @Cast("unsigned long") long ulVal(); public native nvmlValue_t ulVal(long setter);
    /** If the value is unsigned long long */
    public native @Cast("unsigned long long") long ullVal(); public native nvmlValue_t ullVal(long setter);
    /** If the value is signed long long */
    public native long sllVal(); public native nvmlValue_t sllVal(long setter);
}
